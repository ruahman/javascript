{
  "tasks": {
    "main": "deno run .\\main.ts",
    "test": "deno run .\\test.ts",
    "watch:test": "denon run .\\test.ts",
    "welcome": "deno run https://deno.land/std/examples/welcome.ts",
    "sandbox": "deno run --allow-read --allow-write --allow-net .\\sandbox.ts",
    "files": "deno run --allow-read --allow-write files.ts",
    "fetch": "deno run --allow-net fetch.ts",
    "std": "deno run --allow-read --allow-write --allow-net std.ts",
    "third_parties": "deno run third_parties.ts",
    "docker:up": "docker compose up",
    "docker:down": "docker compose down",
    "docker:stop": "docker compose stop",
    "docker:start": "docker compose start",
    "docker:logs": "docker compose logs -f",
    "docker:deno": "docker compose exec -it deno /bin/bash",
    "docker:rmi:all": "docker rmi -f $(docker images -aq)",
    "docker:rm:all": "docker rm -vf $(docker ps -aq)",
    "docker:volume:prune": "docker volume prune",

    "http_request": "deno run --allow-all --unstable --lock=lock.json --cached-only --import-map=import_map.json .\\http_request.ts https://www.google.com",
    "read_file": "deno run --allow-all --unstable --lock=lock.json --cached-only --import-map=import_map.json .\\read_file.ts 'C:\\Windows\\System32\\Drivers\\etc\\hosts'",
    "http_server": "deno run --allow-net --allow-write --lock=lock.json --cached-only http_server.ts",
    "deno_files": "deno run -A --lock=lock.json --cached-only deno_files.ts",
    "import_json": "deno run -A --lock=lock.json --cached-only import_json.ts",
    "parse_json": "deno run -A --lock=lock.json --cached-only parse_json.ts",
    "npm_express": "deno run -A --lock=lock.json --cached-only npm_express.ts",
    "cow_say": "deno run --allow-env --allow-read npm:cowsay@1.5.0 Hello there!",
    "local_npm": "deno run -A --node-modules-dir .\\local_npm.ts",
    "ffi": "deno run --allow-ffi --unstable .\\ffi.ts",
    "cache": "deno cache --lock=lock.json --lock-write --import-map=import_map.json .\\deps.ts",
    "reload": "deno cache --reload --lock=lock.json --import-map=import_map.json .\\deps.ts",
    "shell": "deno run --allow-all .\\Drake.ts shell"
  },
  "lint": {
    "rules": {
      "exclude": [
        "no-inferrable-types"
      ]
    }
  },
  "fmt": {
    "lineWidth": 80,
    "semiColons": true,
    "singleQuote": true
  }
}
