// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var Curry = require("rescript/lib/js/curry.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

console.log("Hello, ReScript");

console.log(5);

var y = {
  contents: 5
};

y.contents = y.contents + 1 | 0;

var message = "message";

var s = "hello " + message;

function name(arg) {
  return arg;
}

function myFun(x, y) {
  var doubleX = x + x | 0;
  var doubleY = y + y | 0;
  return doubleX + doubleY | 0;
}

var fl = 9.1 + 5;

var mulf = 34 * 10;

function getInt(a) {
  return a + 8 | 0;
}

function addInts(a, b) {
  return a + b | 0;
}

function curried(param) {
  return 8 + param | 0;
}

var cr = 14;

function convertf(x) {
  return x;
}

function factorial(n) {
  if (n <= 1) {
    return 1;
  } else {
    return Math.imul(n, factorial(n - 1 | 0));
  }
}

var rf = factorial(10);

function isEven(num) {
  if (num === 0) {
    return true;
  } else {
    return isOdd(num - 1 | 0);
  }
}

function isOdd(num) {
  if (num === 0) {
    return false;
  } else {
    return isEven(num - 1 | 0);
  }
}

var toLowerCase = $$String.lowercase_ascii;

function getFirst(param) {
  return param[0];
}

var rest = 54;

var parents = {
  father: "darth vader",
  mother: "natily portman"
};

var lukeR = {
  firstname: "Luke",
  lastname: "Skywalker",
  job: "Jedi",
  parents: parents
};

function getFirstName(person) {
  return person.firstname;
}

function getFather(param) {
  return param.parents.father;
}

var updateLuke = {
  firstname: "Luke",
  lastname: "Skywalker",
  job: "Farmer",
  parents: parents
};

var hanA = [
  "han",
  "solo",
  "pilot"
];

var hanA$p = [
  "Han",
  "Solo",
  "Pilot"
];

function getSecond(arr) {
  return Caml_array.get(arr, 1);
}

function toString(field) {
  if (field) {
    if (field._0) {
      return "O";
    } else {
      return "X";
    }
  } else {
    return "";
  }
}

var randomeField = /* Marked */{
  _0: /* Circle */1
};

console.log(toString(randomeField));

function isBigger(animal1, animal2) {
  switch (animal1) {
    case /* Bear */0 :
        return animal2 !== 0;
    case /* Rabbit */1 :
        return false;
    case /* Deer */2 :
        return animal2 === 1;
    
  }
}

function swap(x, y) {
  return [
          y,
          x
        ];
}

var title = "Reason workshop";

var resO = title !== undefined ? "the name of this tutorial is: " + title : "Unkown";

var intList = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: {
        hd: 4,
        tl: {
          hd: 5,
          tl: /* [] */0
        }
      }
    }
  }
};

function getLenght(randomList) {
  if (randomList) {
    return 1 + getLenght(randomList.tl) | 0;
  } else {
    return 0;
  }
}

console.log(getLenght(intList));

console.log(List.length(intList));

var charac = {
  hd: "Obi-wan",
  tl: {
    hd: "Yoda",
    tl: /* [] */0
  }
};

var charac2_1 = {
  hd: "Leia",
  tl: {
    hd: "Han",
    tl: charac
  }
};

var charac2 = {
  hd: "Luke",
  tl: charac2_1
};

function append(list1, list2) {
  if (list1) {
    return {
            hd: list1.hd,
            tl: append(list1.tl, list2)
          };
  } else {
    return list2;
  }
}

function getLength$p(randomList) {
  if (randomList) {
    return 1 + getLength$p(randomList.tl) | 0;
  } else {
    return 0;
  }
}

function withFunctions_addInts(int1, int2) {
  return int1 + int2 | 0;
}

function withFunctions_concatStrings(string1, string2) {
  return string1 + " " + string2;
}

var withFunctions = {
  addInts: withFunctions_addInts,
  concatStrings: withFunctions_concatStrings,
  title: "Record of functions"
};

function add(a) {
  return a + 5 | 0;
}

function computeRec(operationFunc, _x, _recCount) {
  while(true) {
    var recCount = _recCount;
    var x = _x;
    if (recCount === 0) {
      return x;
    }
    _recCount = recCount - 1 | 0;
    _x = Curry._1(operationFunc, x);
    continue ;
  };
}

var res2 = computeRec(add, 4, 2);

var divide = Caml_int32.div;

var divide$p = Caml_int32.div;

function multiply(integer1, integer2, param) {
  if (integer2 !== undefined) {
    return Math.imul(integer1, integer2);
  } else {
    return integer1;
  }
}

function resPartial(param, param$1) {
  return multiply(5, param, param$1);
}

var resm = 5;

function map(func, list) {
  if (list) {
    return {
            hd: Curry._1(func, list.hd),
            tl: map(func, list.tl)
          };
  } else {
    return /* [] */0;
  }
}

function fold_right(func, list, initialAccVal) {
  if (list) {
    return Curry._2(func, list.hd, fold_right(func, list.tl, initialAccVal));
  } else {
    return initialAccVal;
  }
}

function add$1(value, acc) {
  return value + acc | 0;
}

var resf = fold_right(add$1, {
      hd: 1,
      tl: {
        hd: 2,
        tl: {
          hd: 3,
          tl: {
            hd: 4,
            tl: /* [] */0
          }
        }
      }
    }, 10);

function add$2(a) {
  return a + 5 | 0;
}

function mul(m) {
  return Math.imul(m, 5);
}

function sub(s) {
  return s - 5 | 0;
}

var respf = List.rev(List.filter(function (element) {
            return element > 2;
          })(List.flatten({
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              },
              tl: {
                hd: {
                  hd: 3,
                  tl: {
                    hd: 4,
                    tl: /* [] */0
                  }
                },
                tl: {
                  hd: {
                    hd: 4,
                    tl: /* [] */0
                  },
                  tl: /* [] */0
                }
              }
            })));

var respl = List.rev(List.filter(function (element) {
            return element > 2;
          })(List.flatten({
              hd: {
                hd: 1,
                tl: {
                  hd: 2,
                  tl: /* [] */0
                }
              },
              tl: {
                hd: {
                  hd: 3,
                  tl: {
                    hd: 4,
                    tl: /* [] */0
                  }
                },
                tl: {
                  hd: {
                    hd: 4,
                    tl: /* [] */0
                  },
                  tl: /* [] */0
                }
              }
            })));

function subtract(a, b) {
  return a - b | 0;
}

function subtractPartial(__x) {
  return __x - 3 | 0;
}

function addNoArgs(param) {
  return 3;
}

var Finished = /* @__PURE__ */Caml_exceptions.create("Demo.Finished");

throw {
      RE_EXN_ID: Finished,
      _1: "exception",
      Error: new Error()
    };

exports.y = y;
exports.c = c;
exports.message = message;
exports.s = s;
exports.name = name;
exports.myFun = myFun;
exports.fl = fl;
exports.mulf = mulf;
exports.getInt = getInt;
exports.addInts = addInts;
exports.curried = curried;
exports.cr = cr;
exports.convertf = convertf;
exports.factorial = factorial;
exports.rf = rf;
exports.isEven = isEven;
exports.isOdd = isOdd;
exports.toLowerCase = toLowerCase;
exports.dog = dog;
exports.cat = cat;
exports.luke = luke;
exports.han = han;
exports.tx = tx;
exports.getFirst = getFirst;
exports.rest = rest;
exports.parents = parents;
exports.lukeR = lukeR;
exports.lastname = lastname;
exports.job = job;
exports.getFirstName = getFirstName;
exports.father = father;
exports.getFather = getFather;
exports.updateLuke = updateLuke;
exports.hanA = hanA;
exports.hanA$p = hanA$p;
exports.getSecond = getSecond;
exports.nextTurn = nextTurn;
exports.toString = toString;
exports.randomeField = randomeField;
exports.isBigger = isBigger;
exports.swap = swap;
exports.oddNumbers = oddNumbers;
exports.names = names;
exports.isMissing = isMissing;
exports.title = title;
exports.resO = resO;
exports.intList = intList;
exports.getLenght = getLenght;
exports.charac = charac;
exports.charac2 = charac2;
exports.append = append;
exports.getLength$p = getLength$p;
exports.withFunctions = withFunctions;
exports.computeRec = computeRec;
exports.res2 = res2;
exports.divide = divide;
exports.resd = resd;
exports.divide$p = divide$p;
exports.multiply = multiply;
exports.resPartial = resPartial;
exports.resm = resm;
exports.map = map;
exports.fold_right = fold_right;
exports.resf = resf;
exports.add = add$2;
exports.mul = mul;
exports.sub = sub;
exports.resp = resp;
exports.respf = respf;
exports.respl = respl;
exports.subtract = subtract;
exports.subtractPartial = subtractPartial;
exports.res5 = res5;
exports.addNoArgs = addNoArgs;
exports.resu = resu;
exports.Finished = Finished;
exports.getTitle = getTitle;
exports.resEx = resEx;
exports.Done = Done;
exports.mult = mult;
exports.i = i;
exports.x = x;
/*  Not a pure module */
